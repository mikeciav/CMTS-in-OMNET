#mediumloadTCP.ini
#By Michael Ciavarella
#This initializes the NED file with the values it needs to run properly

[Config simple]
description = "50 senders"
##############################################################

[General]
network = simple2.SimpleNet2
tkenv-plugin-path = ../../../etc/plugins
**.numHosts = ${hosts=50}
**.numGens = ${generators=3}
**.host[*].numTcpApps = 1
**.modem[*].numUdpApps = 1
**.cmts.numUdpApps = 1
**.upHost[*].numTcpApps = 1
**.agHost[*].numTcpApps = 1
**.sink.numTcpApps = 1
**.upSink.numTcpApps = 1
**.agSink.numTcpApps = 1


#Cable clients
**.host[*].tcpApp[0].typename = "TCPSessionApp"
**.host[*].tcpApp[0].localPort = 1221
**.host[*].tcpApp[0].active = true
**.host[*].tcpApp[0].connectAddress = "SimpleNet2.sink"
**.host[*].tcpApp[0].connectPort = 1222
**.host[*].tcpApp[0].tOpen =uniform(1.7s,1.71s)
**.host[*].tcpApp[0].tSend = 0s
**.host[*].tcpApp[0].sendBytes = 10000MiB
###**.host[*].tcpApp[0].sendScript = "1.7001 204B ; 1.7002 204B"#<1.7003> <204B>"#;1.7004 204B;1.7005 204B"
**.host[*].tcpApp[0].tClose = 0s
#**.host[*].tcpApp[0].rcvdPk.vector-recording = true
**.host[*].tcpApp[0].endToEndDelay.scalar-recording = true
**.host[*].tcpApp[0].sentPk.scalar-recording = true
#**.host[*].tcpApp[0].endToEndDelay.vector-recording = true

#Cable modem blocks
**.modem[*].udpApp[0].typename = "UDPDocsisApp"
**.modem[*].udpApp[0].destAddresses = "SimpleNet2.cmts"
**.modem[*].udpApp[0].localPort = 2000
**.modem[*].udpApp[0].chooseDestAddrMode = "once"
**.modem[*].udpApp[0].destPort = 2000
**.modem[*].udpApp[0].startTime = 20ms
**.modem[*].udpApp[0].stopTime = 2000s
**.modem[*].udpApp[0].messageLength = 172B
**.modem[*].udpApp[0].burstDuration = exponential(0.352s)
**.modem[*].udpApp[0].sleepDuration = exponential(0.350s)
**.modem[*].udpApp[0].sendInterval = 5000ms
**.modem[*].udpApp[0].isCMTS = false

#CMTS block
**.cmts.udpApp[0].typename = "UDPDocsisApp"
**.cmts.udpApp[0].destAddresses = "SimpleNet2.modem[0] SimpleNet2.modem[1] SimpleNet2.modem[2] SimpleNet2.modem[3] SimpleNet2.modem[4] SimpleNet2.modem[5] SimpleNet2.modem[6] SimpleNet2.modem[7] SimpleNet2.modem[8] SimpleNet2.modem[9] SimpleNet2.modem[10] SimpleNet2.modem[11] SimpleNet2.modem[12] SimpleNet2.modem[13] SimpleNet2.modem[14] SimpleNet2.modem[15] SimpleNet2.modem[16] SimpleNet2.modem[17] SimpleNet2.modem[18] SimpleNet2.modem[19] SimpleNet2.modem[20] SimpleNet2.modem[21] SimpleNet2.modem[22] SimpleNet2.modem[23] SimpleNet2.modem[24] SimpleNet2.modem[25] SimpleNet2.modem[26] SimpleNet2.modem[27] SimpleNet2.modem[28] SimpleNet2.modem[29] SimpleNet2.modem[30] SimpleNet2.modem[31] SimpleNet2.modem[32] SimpleNet2.modem[33] SimpleNet2.modem[34] SimpleNet2.modem[35] SimpleNet2.modem[36] SimpleNet2.modem[37] SimpleNet2.modem[38] SimpleNet2.modem[39] SimpleNet2.modem[40] SimpleNet2.modem[41] SimpleNet2.modem[42] SimpleNet2.modem[43] SimpleNet2.modem[44] SimpleNet2.modem[45] SimpleNet2.modem[46] SimpleNet2.modem[47] SimpleNet2.modem[48] SimpleNet2.modem[49]"
**.cmts.udpApp[0].localPort = 2000
**.cmts.udpApp[0].chooseDestAddrMode = "once"
**.cmts.udpApp[0].destPort = 2000
**.cmts.udpApp[0].startTime = 10ms
**.cmts.udpApp[0].messageLength = 172B # 160B voice + 12B RTP header
**.cmts.udpApp[0].burstDuration = exponential(0.352s)
**.cmts.udpApp[0].sleepDuration = exponential(2s)
**.cmts.udpApp[0].sendInterval = 500ms
**.cmts.udpApp[0].isCMTS = true
**.cmts.udpApp[0].numCMs = ${hosts}

#Host feeding into upstream router
**.upHost[*].tcpApp[0].typename = "TCPSessionApp"
**.upHost[*].tcpApp[0].localPort = 1221
**.upHost[*].tcpApp[0].active = true
**.upHost[*].tcpApp[0].connectAddress = "SimpleNet2.sink"
**.upHost[*].tcpApp[0].connectPort = 1222
**.upHost[*].tcpApp[0].tOpen =uniform(1.69s, 1.691s)
**.upHost[*].tcpApp[0].tSend = 0s
**.upHost[*].tcpApp[0].sendBytes = 10000MiB
###**.upHost[*].tcpApp[0].sendScript = "1.7001 204B ; 1.7002 204B"#<1.7003> <204B>"#;1.7004 204B;1.7005 204B"
**.upHost[*].tcpApp[0].tClose = 0s

#Host feeding into aggregate router
**.agHost[*].tcpApp[0].typename = "TCPSessionApp"
**.agHost[*].tcpApp[0].localPort = 1221
**.agHost[*].tcpApp[0].active = true
**.agHost[*].tcpApp[0].connectAddress = "SimpleNet2.sink"
**.agHost[*].tcpApp[0].connectPort = 1222
**.agHost[*].tcpApp[0].tOpen =uniform(1.68s, 1.681s)
**.agHost[*].tcpApp[0].tSend = 0s
**.agHost[*].tcpApp[0].sendBytes = 10000MiB
###**.agHost[*].tcpApp[0].sendScript = "1.7001 204B ; 1.7002 204B"#<1.7003> <204B>"#;1.7004 204B;1.7005 204B"
**.agHost[*].tcpApp[0].tClose = 0s

**.sink.tcpApp[0].typename = "TCPEchoApp"
**.sink.tcpApp[0].localPort = 1222
**.sink.tcpApp[0].echoDelay = 1ms
**.sink.tcpApp[0].echoFactor = .5
**.sink.tcpApp[0].endToEndDelay.scalar-recording = true
#**sink.tcpApp[0].rcvdPk.vector-recording = true
#**sink.tcpApp[0].endToEndDelay.vector-recording = true
**.sink.tcpApp[0].vector-recording = true
#**.sink.vector-recording = true
#**.vector-recording = true

#Queues
**sink.eth[0].queueType = "DropTailQueue"
**sink.eth[0].queue.frameCapacity = 100

**.cmts.ppp[*].queueType = "DropTailQueue"
**.cmts.ppp[*].queue.frameCapacity = 100

**.modem[*].ppp[*].queueType = "DropTailQueue"
**.modem[*].ppp[*].queue.frameCapacity = 1000
**.modem[*].ppp[*].queue.CableModem = true #This queue belongs to a cable modem
**.modem[*].ppp[*].queue.*.scalar-recording = true

**.ur.ppp[1].queueType = "DropTailQueue"
**.ur.ppp[1].queue.frameCapacity = 1000000
**.ur.ppp[1].queue.result-recording-modes = count
**.ur.ppp[1].queue.dropPk.result-recording-modes = count
**.ur.ppp[1].queue.queueLength.result-recording-modes = timeavg
#**.ur.ppp[1].queue.queueingTime.result-recording-modes = vector # for computing median
**.ur.ppp[1].queue.scalar-recording = true
**.ur.ppp[1].numOutputHooks = 1
**.ur.ppp[1].outputHook[0].typename = "ThruputMeter" # Nop | ThruputMeter | OrdinalBasedDropper | OrdinalBasedDuplicator

**.ar.ppp[1].queueType = "DropTailQueue"
**.ar.ppp[1].queue.frameCapacity = 1000000
**.ar.ppp[1].queue.result-recording-modes = count
**.ar.ppp[1].queue.dropPk.result-recording-modes = count
**.ar.ppp[1].queue.queueLength.result-recording-modes = timeavg
#**.ar.ppp[1].queue.queueingTime.result-recording-modes = vector # for computing median
**.ar.ppp[1].queue.scalar-recording = true
**.ar.ppp[1].numOutputHooks = 1
**.ar.ppp[1].outputHook[0].typename = "ThruputMeter" # Nop | ThruputMeter | OrdinalBasedDropper | OrdinalBasedDuplicator

**.ar.ppp[1].outputHook[0].startTime = 1.7s     # start time
**.ar.ppp[1].outputHook[0].batchSize = 1000000000     # number of packets in a batch
**.ar.ppp[1].outputHook[0].maxInterval = 50ms   # max length of measurement interval (measurement ends
                      # if either batchsize or maxinterval is reached, whichever
                      # is reached first)

**.ur.ppp[1].outputHook[0].startTime = 1.7s     # start time
**.ur.ppp[1].outputHook[0].batchSize = 1000000000     # number of packets in a batch
**.ur.ppp[1].outputHook[0].maxInterval = 50ms   # max length of measurement interval (measurement ends
                      # if either batchsize or maxinterval is reached, whichever
                      # is reached first)



# tcp settings
**.tcp.advertisedWindow = 65535                      # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.delayedAcksEnabled = false                    # delayed ACK algorithm (RFC 1122) enabled/disabled
**.tcp.nagleEnabled = true                           # Nagle's algorithm (RFC 896) enabled/disabled
**.tcp.limitedTransmitEnabled = false                # Limited Transmit algorithm (RFC 3042) enabled/disabled (can be used for TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl)
**.tcp.increasedIWEnabled = false                    # Increased Initial Window (RFC 3390) enabled/disabled
**.tcp.sackSupport = false                           # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)
**.tcp.windowScalingSupport = false                  # Window Scale (RFC 1323) support (header option) (WS will be enabled for a connection if both endpoints support it)
**.tcp.timestampSupport = false                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
                                 # Maximum Segment Size (RFC 793) (header option)
**.tcp.tcpAlgorithmClass = "TCPVegas"                 # TCPReno/TCPTahoe/TCPNewReno/TCPNoCongestionControl/DumbTCP
**.host[*].tcp.recordStats = true                            # recording of seqNum etc. into output vectors enabled/disabled
**.sink.tcp.recordStats = true                            # recording of seqNum etc. into output vectors enabled/disabled                     # recording of seqNum etc. into output vectors enabled/disabled
**.agHost[*].tcp.recordStats = false                            # recording of seqNum etc. into output vectors enabled/disabled
**.upHost[*].tcp.recordStats = false                            # recording of seqNum etc. into output vectors enabled/disabled
   
**.sink[*].tcp.mss = 204


#For testing...
#**.numPcapRecorders = 1
#**.host[*].pcapRecorder[0].pcapFile = "results/host1.pcap"
#**.sink.pcapRecorder[0].pcapFile = "results/sink.pcap"
#**.router.pcapRecorder[0].pcapFile = "results/router.pcap"
#**.dtqueue.pcapRecorder[0].pcapFile = "results/dtqueue.pcap"
##**.client1.pcapRecorder[0].pcapFile = "results/client1.pcap"
#
